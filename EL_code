
{1min vwap is continuous. We just pull the data from the 1min vwap every hour. }


Using tsdata.marketdata;
Using elsystem;
using elsystem.collections;
using elsystem.drawingobjects;
	
//once clearprintlog;


input: 
	Starttime(  0700 ),
	Endtime( 1600),
	ATRLength (  14 );
vars: 	
	PriceSeriesProvider PSP(NULL),
	double TH (0),
	double TL (0),
	double TR (0),
	int ATRCounter (0),
	double SumTR (0),
	DateTime Firstdatetime (null),
	DailybarH (0),
	DailyBarL (0),
	DailyC (0),
	Datetime Value1(null),
	AvgTR(0),
	
	Horizontalline MyHorizontalline1(null),
	Horizontalline MyHorizontalline2(null),
	double HlinePrice1(0),
	double HlinePrice2(0),
	double sixteenhundredvwap (0),
	
 	PriceSeriesProvider PSPp(NULL),
 	Datetime Firstdatetimee (null),
 	Avgpricee (Null),
 	Totalvolumee(0),
 	xx (0),
 	pv (0),
 	vwapp (0);

//setup PSP(Daily)	
method override void InitializeComponent()
begin
		PSP = new PriceSeriesProvider;
		
		psp.Updated += psp_updated;
		//---------------------------
		//psp
		//---------------------------
		//PSP.Symbol = Symbol;
		PSP.Symbol = Symbol;
		PSP.Interval.ChartType = DataChartType.Bars;
		PSP.Interval.IntervalType = DataIntervalType.Daily;
		PSP.Interval.IntervalSpan = 1;
		PSP.Interval.Name = "(Unknown name)";
		//PSP.Range.Type = DataRangeType.Date;
		Firstdatetime = BarDatetime;
		Firstdatetime.adddays( -AtrLength - 2);
		PSP.Range.FirstDate = firstdatetime;
		//Print( D, T, "Bardatetime", Bardatetime.tostring(), "Maxbarsback", Maxbarsback);
		PSP.Range.Name = "(Unknown name)";
		PSP.IncludeVolumeInfo = false;
		PSP.IncludeTicksInfo = false;
		PSP.UseNaturalHours = false;
		PSP.Realtime = true;
		PSP.TimeZone = tsdata.common.TimeZone.local;
		If Analysistechnique.Datastreams.stream[Datanum].timezone = tsdata.common.timezone.exchange
		then PSP.TimeZone = tsdata.common.timezone.exchange else PSP.timezone = tsdata.common.timezone.Local; //making it work on exchange or local time
		PSP.Load = true;
		PSP.Name = "PSP";
		
		
		PSPp = new PriceSeriesProvider;
		
		//---------------------------
		//pspp
		//---------------------------
		PSPp.Symbol = Symbol;
		PSPp.Interval.ChartType = DataChartType.Bars;
		PSPp.Interval.IntervalType = DataIntervalType.Minutes;
		PSPp.Interval.IntervalSpan = 1;
		PSPp.Interval.Name = "(Unknown name)";
		PSPp.Range.Type = tsdata.marketdata.DataRangeType.Date;
		Firstdatetimee = BarDatetime;
		Firstdatetimee.adddays(-2);
		PSPp.Range.FirstDate = firstdatetimee;
		PSPp.Range.Name = "(Unknown name)";
		PSPp.IncludeVolumeInfo = true;
		PSPp.IncludeTicksInfo = true;
		PSPp.UseNaturalHours = false;
		PSPp.Realtime = true;
		PSPp.TimeZone = tsdata.common.TimeZone.local;
		PSPp.Load = true;
		PSPp.Name = "PSPp";
end;


method void PSP_Updated( elsystem.Object sender, PriceSeriesUpdatedEventArgs args ) 
begin

end;


	If date >= currentdate - 4 then Condition1 = true else condition1 = false; //because the weekend is that many days away. We are trying to store the 1600 vwap to base Datr off of.
	If condition1 = true and time >= starttime and time <= endtime and pspp.count > 3 then
	Begin 
		Avgpricee = (pspp.open[0]+pspp.close[0]+pspp.low[0]+pspp.high[0]) / 4;
		pv = pv + (avgpricee * (pspp.VolumeUp[0] + pspp.volumeDown[0]));
		Totalvolumee = Totalvolumee + (pspp.volumeup[0] + pspp.volumedown[0]);
		vwapp = iff(totalvolumee <> 0, (pv/totalvolumee),1);
		Plot1(vwapp);
		If time >= Sess1endtime and sixteenhundredvwap <> vwapp then sixteenhundredvwap = Vwapp else sixteenhundredvwap = sixteenhundredvwap;
	End
	Else
	Begin
		vwapp = 0;
		Avgpricee = 0;
		Totalvolumee = 0;
		pv = 0; 
	End;
	
	If date < currentdate - 10 then setplotcolor(1, transparent);

	
	
//Calculate D ATR using PSP
SumTR = 0;
If PSP.Count >= 1 then 
begin
	If PSP.Count > ATRLength then 
	Begin	
		For ATRCounter = 0 to ATRLength - 1
		Begin
			DailybarH = PSP.High[ATRCounter];
			DailyBarL = PSP.Low[ATRCounter];
			DailyC = PSP.Close[ATRCounter + 1];
			//TH
			If DailyC > DailyBarH then TH = DailyC else TH = DailybarH;
			//TL
			If DailyC < DailyBarL then TL = DailyC else TL = DailybarL;
			//TR
			TR = TH - TL;
			SumTR = TR + SumTR;
		End;
		AvgTR = SumTR / ATRLength;
if date <> date[1] then Print(date, "	,	DATR:  ",AvgTR);
	End;
end;

//End of Day Vwap is what we base the Daily ATR off of. Not end of day closing price. 
if dailylow > sixteenhundredVwap then Hlineprice1 = sixteenhundredVwap + avgtr else Hlineprice1 = dailylow + (avgtr*2) ; 
if dailyhigh < sixteenhundredVwap then Hlineprice2 = sixteenhundredVwap - avgtr else Hlineprice2 = dailyhigh - (avgtr*2) ;
//Draw Horizontal line

If time = Endtime and PSP.count > ATRLength and Drawingobjects.items[10].count <= 2 then 
Begin 

   If Drawingobjects.items[10].count > 2 then Begin 
									Drawingobjects.Delete((DrawingObjects.items[10] astype Vector) [0] astype Drawingobject); 
									End;
									
	MyHorizontalline1 = Horizontalline.create(HlinePrice1);
	MyHorizontalline1.persist = False;
	Drawingobjects.add(MyHorizontalline1);
	MyHorizontalline1.color = elsystem.drawing.Color.magenta;
	MyHorizontalline1.style = styletype.dotted;
	MyHorizontalline1.weight = 0; 
	MyHorizontalline1.Lock = True; 
	
	If Drawingobjects.items[10].count > 2 then Begin 
									Drawingobjects.Delete((DrawingObjects.items[10] astype Vector) [0] astype Drawingobject); 
									End;
	
	MyHorizontalline2 = Horizontalline.create(HlinePrice2);
	MyHorizontalline2.persist = False;
	Drawingobjects.add(MyHorizontalline2);
	MyHorizontalline2.color = elsystem.drawing.Color.magenta;
	MyHorizontalline2.style = styletype.dotted;
	MyHorizontalline2.weight = 0;
	MyHorizontalline2.Lock = True;
	
	If Drawingobjects.items[10].count > 2 then Begin 
									Drawingobjects.Delete((DrawingObjects.items[10] astype Vector) [0] astype Drawingobject); 
									End;   
									
end; 
